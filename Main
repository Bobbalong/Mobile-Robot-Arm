String serialString1 = "";
boolean stringComplete = false;
//Base Motor
const int BmotorFwd = 2;
const int BmotorRev = 3;
int BmotorState = 0;
unsigned long BmotorMillis;
//Joint Motor 1
const int m1Fwd = 4;
const int m1Rev = 5;
int m1State = 0;
unsigned long m1Millis;
//Joint Motor 2
const int m2Fwd = 6;
const int m2Rev = 7;
int m2State = 0;
unsigned long m2Millis;
//Wrist Motor 3
const int m3Fwd = 8;
const int m3Rev = 9;
int m3State = 0;
unsigned long m3Millis;
//Gripper Motor 4
const int m4Fwd = 10;
const int m4Rev = 11;
//Left Wheel Motor
const int leftWmotorFwd = 22;
const int leftWmotorRev = 23;
//Right Wheel Motor
const int rightWmotorFwd  = 24;
const int rightWmotorRev  = 25;

//LED
const int LEDpin  = 12;
int LEDstate = 0;
unsigned long LEDMillis;
int BlinkInterval = 30;

//Gripper
int gripPos = 0;
int gripTime = 850;

//Motor Run time
int burstTime  = 750;
int mStep = 250;

//Commands
int Command;
const int commandSig[] = {120, 50, 46, 48, 49, 51, 52, 55, 54, 57, 53, 56, 43, 45, 113, 97, 101, 100, 119, 115, 116, 99, 122};

const int commandQty = 22;
//=======================================================================================================================================
void Blink() {
  digitalWrite(LEDpin, HIGH);
  digitalWrite(LEDpin, LOW);

}
void basefwd() {
  digitalWrite(BmotorFwd, HIGH);
  delay(burstTime);
  digitalWrite(BmotorFwd, LOW);
};

void baserev() {
  digitalWrite(BmotorRev, HIGH);
  delay(burstTime);
  digitalWrite(BmotorRev, LOW);
};

void m1rev() {
  digitalWrite(m1Fwd, HIGH);
  delay(burstTime);
  digitalWrite(m1Fwd, LOW);
};

void m1fwd() {
  digitalWrite(m1Rev, HIGH);
  delay(burstTime);
  digitalWrite(m1Rev, LOW);
};

void m2fwd() {
  digitalWrite(m2Fwd, HIGH);
  delay(burstTime);
  digitalWrite(m2Fwd, LOW);
};

void m2rev() {
  digitalWrite(m2Rev, HIGH);
  delay(burstTime);
  digitalWrite(m2Rev, LOW);
};

void m3rev() {
  digitalWrite(m3Fwd, HIGH);
  delay(burstTime);
  digitalWrite(m3Fwd, LOW);
}

void m3fwd() {
  digitalWrite(m3Rev, HIGH);
  delay(burstTime);
  digitalWrite(m3Rev, LOW);
}
void griprev() {
  digitalWrite(m4Fwd, HIGH);
  delay(gripTime);
  digitalWrite(m4Fwd, LOW);
}
void gripfwd() {
  digitalWrite(m4Rev, HIGH);
  delay(gripTime);
  digitalWrite(m4Rev, LOW);
}
void wheelRfwd() {
  digitalWrite(leftWmotorFwd, HIGH);
  delay(burstTime);
  digitalWrite(leftWmotorFwd, LOW);
}
void wheelRrev() {
  digitalWrite(leftWmotorRev, HIGH);
  delay(burstTime);
  digitalWrite(leftWmotorRev, LOW);
}
void wheelLfwd() {
  digitalWrite(rightWmotorFwd, HIGH);
  delay(burstTime);
  digitalWrite(rightWmotorFwd, LOW);
}
void wheelLrev() {
  digitalWrite(rightWmotorRev, HIGH);
  delay(burstTime);
  digitalWrite(rightWmotorRev, LOW);
}
void fullfwd() {
  digitalWrite(leftWmotorFwd, HIGH);
  digitalWrite(rightWmotorFwd, HIGH);
  delay(burstTime);
  digitalWrite(leftWmotorFwd, LOW);
  digitalWrite(rightWmotorFwd, LOW);
}
void fullrev() {
  digitalWrite(leftWmotorRev, HIGH);
  digitalWrite(rightWmotorRev, HIGH);
  delay(burstTime);
  digitalWrite(leftWmotorRev, LOW);
  digitalWrite(rightWmotorRev, LOW);
}
void spinLeft() {
  digitalWrite(leftWmotorFwd, HIGH);
  digitalWrite(rightWmotorRev, HIGH);
  delay(burstTime);
  digitalWrite(leftWmotorFwd, LOW);
  digitalWrite(rightWmotorRev, LOW);
}
void spinRight() {
  digitalWrite(leftWmotorRev, HIGH);
  digitalWrite(rightWmotorFwd, HIGH);
  delay(burstTime);
  digitalWrite(leftWmotorRev, LOW);
  digitalWrite(rightWmotorFwd, LOW);
}
void spin180r() {
  digitalWrite(leftWmotorRev, HIGH);
  digitalWrite(rightWmotorFwd, HIGH);
  delay(4750);
  digitalWrite(leftWmotorRev, LOW);
  digitalWrite(rightWmotorFwd, LOW);
}
void spin180l() {
  digitalWrite(leftWmotorFwd, HIGH);
  digitalWrite(rightWmotorRev, HIGH);
  delay(4750);
  digitalWrite(leftWmotorFwd, LOW);
  digitalWrite(rightWmotorRev, LOW);
}
void spdUp() {
  Serial.print("Burst time was: ");
  Serial.print(burstTime);
  Serial.print(". New Burst Time: ");
  burstTime += mStep;
  Serial.print(burstTime);
  Serial.println(".");
}
void spdDown() {
  Serial.print("Burst time was: ");
  Serial.print(burstTime);
  Serial.print(". New Burst Time: ");
  burstTime -= mStep;
  Serial.print(burstTime);
  Serial.println(".");
}
void testSeq() {
  digitalWrite(LEDpin, HIGH);
  basefwd();
  baserev();
  m1fwd();
  m2fwd();
  m2rev();
  m3fwd();
  m3rev();
  gripfwd();
  griprev();
  spinLeft();
  spinRight();
  spin180l();
  wheelRfwd();
  wheelRrev();
  wheelLfwd();
  wheelLrev();
  fullfwd();
  fullrev();
  digitalWrite(LEDpin, LOW);
}
//=======================================================================================================================================
void setup() {



  Serial.begin(9600);

  pinMode(BmotorFwd, OUTPUT);
  pinMode(BmotorRev, OUTPUT);
  pinMode(m1Fwd, OUTPUT);
  pinMode(m1Rev, OUTPUT);
  pinMode(m2Fwd, OUTPUT);
  pinMode(m2Rev, OUTPUT);
  pinMode(m3Fwd, OUTPUT);
  pinMode(m3Rev, OUTPUT);
  pinMode(m4Fwd, OUTPUT);
  pinMode(m4Rev, OUTPUT);
  pinMode(leftWmotorFwd, OUTPUT);
  pinMode(leftWmotorRev, OUTPUT);
  pinMode(rightWmotorFwd, OUTPUT);
  pinMode(rightWmotorRev, OUTPUT);

  pinMode(LEDpin, OUTPUT);

  while (! Serial);

  Serial.println("Arm' Control."); delay(2000);

  Serial.println("Ready.");
}
//=======================================================================================================================================
void serialEvent() {
  while (Serial.available() > 0) {
    char inChar = (char)Serial.read();
    if (inChar == '\n') {
      stringComplete = true;
    }
    serialString1 += inChar;
    limiter();
  }
}
//=======================================================================================================================================
void loop() {
  //Serial.print('.');
  if (stringComplete) {
    //Serial.println(serialString1);
    commandCheck();
    limiter();
    serialString1 = "";
    stringComplete = false;
  }
  limiter();
}

//=======================================================================================================================================
void limiter() {

  unsigned long currentMillis = millis();

  if ((LEDstate < 1) && (currentMillis - LEDMillis >= burstTime)) {
    digitalWrite(LEDpin, LOW);
    LEDMillis = millis();
  }
  if ((LEDstate > 0) && (currentMillis - LEDMillis >= burstTime)) {
    LEDstate--;
    LEDMillis = millis();
  }
  if ((BmotorState < 1) && (currentMillis - BmotorMillis >= burstTime)) {
    digitalWrite(BmotorFwd, LOW);
    digitalWrite(BmotorRev, LOW);
    BmotorMillis =  millis();
  }
    if ((BmotorState > 0) && (currentMillis - BmotorMillis >= burstTime)) {
    BmotorState--;
    BmotorMillis =  millis();
  }
  if ((m1State == 1) && (currentMillis - m1Millis >= burstTime)) {
    digitalWrite(m1Fwd, LOW);
    digitalWrite(m1Rev, LOW);
    m1Millis =  millis();
    m1State = 0;
  }
  if ((m2State == true) && (currentMillis - m2Millis >= burstTime)) {
    digitalWrite(m2Fwd, LOW);
    digitalWrite(m2Rev, LOW);
    m2Millis =  millis();
    m2State = 0;
  }
  if ((m3State == true) && (currentMillis - m3Millis >= burstTime)) {
    digitalWrite(m3Fwd, LOW);
    digitalWrite(m3Rev, LOW);
    m3Millis =  millis();
    m3State = 0;
  }
}
//=========================================================================================
void commandCheck() {
  for (int x = 0; x < commandQty; x++) {
    if (serialString1 == "t\n")
    {
      Serial.println("Test Sequence Initiated");
      testSeq();
    }
    else if (serialString1[x] == 'w')
    {
      Serial.println("Full Forward");
      fullfwd();
    }
    else if (serialString1[x] == 's')
    {
      Serial.println("Full Reverse");
      fullrev();
    }
    else if (serialString1[x] == 'q')
    {
      Serial.println("Right Wheel Forward");
      wheelRfwd();
    }
    else if (serialString1[x] == 'a')
    {
      Serial.println("Right Wheel Reverse");
      wheelRrev();
    }
    else if (serialString1[x] == 'e')
    {
      Serial.println("Left Wheel Forward");
      wheelLfwd();
    }
    else if (serialString1[x] == 'd')
    {
      Serial.println("Left Wheel Reverse");
      wheelLrev();
    }
    else if (serialString1[x] == '0')
    {
      Serial.println("Blink ");
      digitalWrite(LEDpin, HIGH);
      LEDMillis = millis();
      LEDstate++;
    }
    else if (serialString1[x] == '1')
    {
      Serial.println("Rotating base, Left.");
      digitalWrite(BmotorFwd, HIGH);
      BmotorMillis = millis();
      BmotorState++;
    }
    else if (serialString1[x] == '3')
    {
      Serial.println("Rotating base, Right");
      if (BmotorState == 0) {
        digitalWrite(BmotorRev, HIGH);
        BmotorMillis = millis();
        BmotorState++;
      }
    }
    else if (serialString1[x] == '7')
    {
      Serial.println("Motor 1, Forward.");
      digitalWrite(m1Fwd, HIGH);
      m1Millis = millis();
      m1State = 1;
    }
    else if (serialString1[x] == '4')
    {
      Serial.println("Motor 1, Reverse.");
      if (m1State == false) {
        digitalWrite(m1Rev, HIGH);
        m1Millis = millis();
        m1State = 1;
      }
    }
    else if (serialString1[x] == '9')
    {
      Serial.println("Motor 2, Forward.");
      digitalWrite(m2Fwd, HIGH);
      m2Millis = millis();
      m2State = 1;
    }
    else if (serialString1[x] == '6')
    {
      Serial.println("Motor 2, Reverse.");
      if (m2State == false) {
        digitalWrite(m2Rev, HIGH);
        m2Millis = millis();
        m2State = 1;
      }
    }
    else if (serialString1[x] == '8')
    {
      Serial.println("Motor 3, Forward.");
      digitalWrite(m3Fwd, HIGH);
      m3Millis = millis();
      m3State = 1;
    }
    else if (serialString1[x] == '5')
    {
      Serial.println("Motor 3, Reverse.");
      if (m3State == false) {
        digitalWrite(m3Rev, HIGH);
        m3Millis = millis();
        m3State = 1;
      }
    }
    else if (serialString1[x] == '+')
    {
      Serial.println("Gripper, Forward.");
      gripfwd();
    }
    else if (serialString1[x] == '-')
    {
      Serial.println("Gripper, Reverse.");
      griprev();
    }
    else if (serialString1[x] == '2')
    {
      spdUp();
    }
    else if (serialString1[x] == '.')
    {
      spdDown();
    }
    else if (serialString1[x] == 'z')
    {
      Serial.println("spin, Left.");
      spinLeft();
    }
    else if (serialString1[x] == 'c')
    {
      Serial.println("spin, Right.");
      spinRight();
    }
    else if (serialString1[x] == 'x')
    {
      spin180r();
    }
  }
}
